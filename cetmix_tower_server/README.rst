==============================
Cetmix Tower Server Management
==============================

.. 
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !! This file is generated by oca-gen-addon-readme !!
   !! changes will be overwritten.                   !!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !! source digest: sha256:4acc59f24c6a595ffd04cc2b6ed70bfe94541ea16baec84b8591a4c5e29ae09b
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

.. |badge1| image:: https://img.shields.io/badge/maturity-Beta-yellow.png
    :target: https://odoo-community.org/page/development-status
    :alt: Beta
.. |badge2| image:: https://img.shields.io/badge/licence-AGPL--3-blue.png
    :target: http://www.gnu.org/licenses/agpl-3.0-standalone.html
    :alt: License: AGPL-3
.. |badge3| image:: https://img.shields.io/badge/github-cetmix%2Fcetmix--tower-lightgray.png?logo=github
    :target: https://github.com/cetmix/cetmix-tower/tree/14.0/cetmix_tower_server
    :alt: cetmix/cetmix-tower

|badge1| |badge2| |badge3|

Cetmix Tower offers a streamlined solution for managing remote servers
via SSH directly from Odoo. This module is designed for versatility
across different operating systems and software environments, providing
a practical option for those looking to manage servers without getting
tied down by vendor or technology constraints.

-  **Why Cetmix Tower?**

   -  **Open Source:** Cetmix Tower is distributed under the AGPL-3
      license.
   -  **Flexibility:** Use Cetmix Tower alongside other management
      methods without restriction, ensuring you're not limited to a
      single vendor.
   -  **Self-Hosting:** Deploy Cetmix Tower on your own infrastructure
      for full control over your server management.
   -  **Broad Compatibility:** Execute any software that's manageable
      via shell commands, from Docker or Kubernetes to direct OS package
      installations.
   -  **Odoo Integration:** Benefit from Odoo's ecosystem for server
      management tasks, like deploying servers in response to specific
      Odoo-triggered events.
   -  **Beyond Odoo:** While optimized for Odoo, Cetmix Tower supports a
      wide range of software applications, offering flexibility in
      server management tasks.

-  **Connectivity**

   -  Password and key based authentication when connection to remote
      server.
   -  Server wide variables that can be used for rendering commands.

-  **Commands**

   -  Execute commands on multiple servers at once.
   -  Render commands using variables.
   -  Store sensitive information in secret keys that are not visible in
      command preview.

-  **Flight Plans**

   -  Execute commands in series.
   -  Condition based flow: execute a command based on the previous
      command result.

-  **Files**

   -  Download files from remote server using SFTP.
   -  Upload files to remote server using SFTP.
   -  Manage files using templates.

-  **Support and Technical Requirements**

   -  Cetmix Tower is designed to be accessible, though some features
      might require a foundational understanding of server management
      principles.
   -  We offer dedicated support to help with any custom setup needs or
      questions that arise.
   -  For additional details, visit our website
      `cetmix.com <https://cetmix.com>`__.

**Table of contents**

.. contents::
   :local:

Configuration
=============

Please ensure that you have read and understood the documentation before
running **Cetmix Tower** in the production environment.

Configure a Server
------------------

Go to the ``Cetmix Tower/Servers/Servers`` menu and click ``Create``.

Enter the server name and fill the values it the tabs below:

General Settings
~~~~~~~~~~~~~~~~

-  **Partner**: Partner this server belongs to
-  **Operating System**: Operating system that runs on the server
-  **IPv4 Address**
-  **IPv6 Address**: Will be used if no IPv4 address is specified
-  **SSH Auth Mode**: Available options are "Password" and "Key"
-  **SSH Port**
-  **SSH Username**
-  **Use sudo**: If sudo is required by default for running all commands
   on this server
-  **SSH Password**: Used if Auth Mode is set to "Password" and for
   running ``sudo`` commands with password
-  **SSH Private Key**: Used for authentication is SSH Auth Mode is set
   to "Key"
-  **Note**: Comments or user notes

There is a special **Status** field which indicates current Server
status. It is meant to be updated automatically using external API with
further customizations. Following pre-defined statuses are available:

-  Undefined
-  Stopped
-  Starting
-  Running
-  Stopping
-  Restarting

Default status is 'Undefined'.

Variables
~~~~~~~~~

Configure variable values to be used when rendering commands and files
on this server. Check the `Configuring
Variables <#configure-variables>`__ section for more details.

Secrets
~~~~~~~

Configure secret values to used when rendering commands and files on
this server. Check the `Configuring
Keys/Secrets <#configure-a-keysecret>`__ section for more details.

Files
~~~~~

Click the "Files" action button to access files that belong to this
server. Check the `Configuring Files <#configure-a-file>`__ section for
more details.

Configure Variables
-------------------

To configure variables go to the ``Cetmix Tower/Settings`` and select
the ``Variables`` menu.

Variables Applicability
~~~~~~~~~~~~~~~~~~~~~~~

**Cetmix Tower** supports ``jinja2`` syntax for variables. You can use
variables to render:

-  Commands. Eg ``ls -lh {{ file_store_location }}``
-  Files. Eg a "Dockerfile" file can have the following text in it:
   ``ODOO_VERSION = {{ odoo_default_version }}``
-  File Templates. You can use variables for both file name and file
   location on server. Eg ``File Name`` value is
   ``backup_{{ instance_name }}_{{ odoo_db_name }}`` and
   ``Directory on server`` is ``{{ file_cron_location }}``
-  Other Variables. Eg for an ``odoo_config_location`` variable can have
   a value of ``{{ odoo_root}}/conf``

You can use any ``jinja2`` supported expressions. For example
``if else`` statements:

::

   docker run -d -p {{ odoo_port }}:8069 \
   {% if  odoo_longpolling_port and odoo_longpolling_port != '0' and odoo_workers and odoo_workers != '0' %}
       -p {{ odoo_longpolling_port }}:8072 \
   {% endif %}
       -v {{ odoo_data }}:/var/lib/odoo \
   {% if  odoo_config_location %}
       -v {{ odoo_config_location }}:/etc/odoo \
   {% endif %}

Variable Types
~~~~~~~~~~~~~~

Following types of variable values available in **Cetmix Tower**:

-  Local values. Those are values that are defined at a record level.
   For example for a server.
-  Global values. Those are values that are defined at the **Cetmix
   Tower** level.

When rendering an expression local values are used first. If no local
value is found then global value will be used. For example default value
of the ``odoo_port`` variable is ``8069``. However you can easily
specify any other value and thus run multiple Odoo instances on a single
server.

**IMPORTANT!**: Storing sensitive data (eg GitHub tokens) in variable
values may expose that date in command preview and logs. Use
`secrets <#configure-a-keysecret>`__ for storing such data instead.

'tower' System Variable
~~~~~~~~~~~~~~~~~~~~~~~

There is a special ``tower`` variable available which allows to access
some system parameters and helper tools. **Important!** do not redefine
the ``tower`` variable unless you really need that on purpose.

Following system variables are available:

-  Server properties

   -  ``tower.server.name`` Current server name
   -  ``tower.server.username`` Current server SSH Username​
   -  ``tower.server.ipv4`` Current server IPv4 Address​
   -  ``tower.server.ipv6`` Current server IPv6 Address​
   -  ``tower.server.partner_name`` Current server partner name

-  Helper tools

   -  ``tower.tools.uuid`` Generates a random UUID4
   -  ``tower.tools.today`` Current date
   -  ``tower.tools.now`` Current date time

Configure a Key/Secret
----------------------

| Keys/Secrets are used to private SSH keys and sensitive data that is
  used for rendering command and files.
| To configure a new key or secret go to ``Cetmix Tower/Settings/Keys``
  click ``Create`` and put values in the fields:

-  **Name**: Readable name
-  **Key Type**: Can be ``SSH Key`` or ``Secret``
-  **Key ID**: This values will be used for referencing this secret in
   commands and files
-  **Value**: Key value. **IMPORTANT:** This is a write only field.
   Please ensure that you have saved your key/secret before saving it.
   Once saved it cannot be read from the user interface any longer.
-  **Used For**: List of Servers this key of type ``SSH Key`` is used
   for

Configure a File
----------------

**Cetmix Tower** is using SFTP protocol for file transfer operations.
Based on initial file location following file sources are available:

-  Server. These are files that are initially located on remote server
   and are fetched to **Cetmix Tower**. For example log files.

-  Tower. These are files that are initially formed in **Cetmix Tower**
   and are uploaded to remote server. For example configuration files.
   Such files are rendered using variables and can be created and
   managed using file templates.

To create a new file go to ``Cetmix Tower/Files/Files`` click ``Create``
and put values in the fields:

-  **Name**: Filesystem filename
-  **Source**: File source. Available options are ``Server`` and
   ``Tower``. Check above for more details.
-  **Template**: File template used to render this file. If selected
   file will be automatically updated every time template is modified.
   Used only with ``Tower`` source.
-  **Server**: Server where this file is located
-  **Directory on Server**: This is where the file is located on the
   remote server
-  **Full Server Path**: Full path to file on the remote server
   including filename
-  **Auto Sync**: If enabled the file will be automatically uploaded to
   the remote server on after it is modified in **Cetmix Tower**. Used
   only with ``Tower`` source.
-  **Keep when deleted**: If enabled, file will be kept on remote server
   after removing it in the Odoo

Following fields are located in the tabs below:

-  **Code**: Raw file content. This field is editable for the ``Tower``
   files and readonly for ``Server`` ones. This field supports
   `Variables <#configure-variables>`__.
-  **Preview**: This is a rendered file content as it will be uploaded
   to server. Used only with ``Tower`` source.
-  **Server Version**: Current file content fetched from server. Used
   only with ``Tower`` source.

**NB**: File operations are performed using user credentials from server
configuration. You should take care of filesystem access rights to
ensure that file operations are performed without any issues.

File Templates
~~~~~~~~~~~~~~

File templates are used to create and manage multiple files in bulk.
Once a template is modified all related files are automatically updated.

To create a new file template go to ``Cetmix Tower/Files/Templates``
click ``Create`` and put values in the fields:

-  **Name**: Template name
-  **File Name**: Filesystem name of the file(s) created from this
   template. This field supports `Variables <#configure-variables>`__.
-  **Directory on server**: Directory on remote server where this file
   will be stored. This field supports
   `Variables <#configure-variables>`__.
-  **Tags**: Make usage as search more convenient
-  **Note**: Comments or user notes
-  **Code**: Raw file content. This field supports
   `Variables <#configure-variables>`__.
-  **Keep when deleted**: If enabled, file(s) created from this template
   will be kept on remote server after removing it(them) in the Odoo

**Hint**: If you want to create a file from template but don't want
further template modifications to be applied to this file remove the
value from the ``Template`` field before saving it.

Configure a Command
-------------------

Command is a shell command that is executed on remote server. To create
a new command go to ``Cetmix Tower/Commands/Commands`` click ``Create``
and put values in the fields:

-  **Name**: Command readable name.

-  **Allow Parallel Run**: If disabled only one copy of this command can
   be run on the same server at the same time. Otherwise the same
   command can be run in parallel.

-  **Note**: Comments or user notes.

-  **Servers**: List of servers this command can be run on. Leave this
   field blank to make the command available to all servers.

-  **OSes**: List of operating systems this command is available. Leave
   this field blank to make the command available for all OSes.

-  **Tags**: Make usage as search more convenient.

-  **Action**: Action executed by the command. Possible options:

   -  ``Execute shell command``: Execute a shell command using ssh
      connection on remote server.
   -  ``Push file``: Create or update a file using selected file
      template and push it to remote server. If the file already exists
      on server it will be overwritten.

-  **Default Path**: Specify path where command will be executed. This
   field supports `Variables <#configure-variables>`__. Important:
   ensure ssh user has access to the location even if executing command
   using sudo.

-  **Code**: Command code as it will be executed by remote shell. This
   field supports `Variables <#configure-variables>`__.

-  **File Template**: File template that will be used to create or
   update file. Check `File Templates <#file-templates>`__ for more
   details.

Configure a Flight Plan
-----------------------

Flight Plans are used to execute commands in series. They allow to build
a flexible condition based execution flow. To create a new flight plan
go to ``Cetmix Tower/Commands/Flight Plans`` click ``Create`` and put
values in the fields:

-  **Name**: Flight Plan name
-  **On Error**: Default action to execute when an error happens during
   the flight plan execution. Possible options:

   -  ``Exit with command code``. Will terminate the flight plan
      execution and return an exit code of the failed command.
   -  ``Exit with custom code``. Will terminate the flight plan
      execution and return the custom code configured in the field next
      to this one.
   -  ``Run next command``. Will continue flight plan execution.

-  **Note**: Comments or user notes.
-  **Servers**: List of servers this command can be run on. Leave this
   field blank to make the command available to all servers.
-  **Tags**: Make usage as search more convenient.
-  **Code**: List of commands to execute. Each of the commands has the
   following fields:

   -  **Sequence**: Order this command is executed. Lower value = higher
      priority.
   -  **Command**: `Command <#configure-a-command>`__ to be executed.
   -  **Path**: Specify path where command will be executed. Overrides
      ``Default Path`` of the command. This field supports
      `Variables <#configure-variables>`__.
   -  **Use Sudo**: Use ``sudo`` if required to run this command.
   -  **Actions**: List of condition based actions to be triggered after
      the command is executed. Each of the actions has the following
      fields:

      -  **Sequence**: Order this actions is triggered. Lower value =
         higher priority.
      -  **Condition**: Uses command exit code.
      -  **Action**: Action to execute if condition is met. Possible
         options:

         -  ``Exit with command code``. Will terminate the flight plan
            execution and return an exit code of the failed command.
         -  ``Exit with custom code``. Will terminate the flight plan
            execution and return the custom code configured in the field
            next to this one.
         -  ``Run next command``. Will continue flight plan execution.

Configuration best practices
----------------------------

Use simple commands
~~~~~~~~~~~~~~~~~~~

Try to avoid using ``&&`` or ``;`` joined commands unless this is really
needed. Use flight plans instead.

**Why?**

-  Simple commands are easier to reuse across multiple flight plans.
-  Commands run with ``sudo`` with password are be split and executed
   one by one anyway.

**Not recommended:**

.. code:: bash

   apt-get update && apt-get upgrade -y && apt-get install doge-meme-generator

**Way to go:**

.. code:: bash

   apt-get update

.. code:: bash

   apt-get upgrade -y

.. code:: bash

   apt-get install doge-meme-generator

Do not change directory using shell commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Do not use ``cd`` or ``chdir`` commands. Use ``Default Path`` field in
command or ``Path`` field in flight plan line.

**Why?**

-  Tower will automatically adjust the command to ensure it is properly
   executed in the specified location.

**Do not do this:**

.. code:: bash

   cd /home/{{ tower.server.username }}/memes && cat my_doge_memes.txt

**Way to go:**

-  Add the following value in the ``Default Path`` command field or
   ``Path`` field of a flight plan line:

.. code:: bash

   /home/{{ tower.server.username }}/memes

-  Leave the command code as follows:

.. code:: bash

   cat my_doge_memes.txt

Usage
=====

Running a Command
-----------------

To run a command:

-  Select a server in the list view or open a server form view
-  Open the ``Actions`` menu and click ``Execute Command``
-  A wizard is opened with the following fields:

   -  **Servers**: Servers on which this command will be executed
   -  **Tags**: If selected only commands with these tags will be shown
   -  **Sudo**: ``sudo`` option for running this command
   -  **Command**: Command to execute
   -  **Show shared**: By default only commands available for the
      selected server(s) are selectable. Activate this checkbox to
      select any command
   -  **Path**: Directory where command will be executed. Important:
      this field does not support variables! Ensure that user has access
      to this location even if you run command using sudo.
   -  **Code**: Raw command code
   -  **Preview**: Command code rendered using server variables.
      **IMPORTANT:** If several servers are selected preview will be
      rendered for the first one. However during the command execution
      command code will be rendered for each server separately.

There are two action buttons available in the wizard:

-  **Run**. Executes a command using server "run" method and log command
   result into the "Command Log".
-  **Run in wizard**. Executes a command directly in the wizard and show
   command log in a new wizard window.

You can check command execution logs in the
``Cetmix Tower/Commands/Command Logs`` menu. Important! If you want to
delete a command you need to delete all its logs manually before doing
that.

Running a Flight Plan
---------------------

To run a flight plan:

-  Select a server in the list view or open a server form view

-  Open the ``Actions`` menu and click ``Execute Flight Plan``

-  A wizard is opened with the following fields:

   -  **Servers**: Servers on which this command will be executed
   -  **Tags**: If selected only commands with these tags will be shown
   -  **Plan**: Flight plan to execute
   -  **Show shared**: By default only flight plans available for the
      selected server(s) are selectable. Activate this checkbox to
      select any flight plan
   -  **Commands**: Commands that will be executed in this flight plan.
      This field is read only

   Click the **Run** button to execute a flight plan.

   You can check the flight plan results in the
   ``Cetmix Tower/Commands/Flight Plan Logs`` menu. Important! If you
   want to delete a command you need to delete all its logs manually
   before doing that.

Bug Tracker
===========

Bugs are tracked on `GitHub Issues <https://github.com/cetmix/cetmix-tower/issues>`_.
In case of trouble, please check there if your issue has already been reported.
If you spotted it first, help us to smash it by providing a detailed and welcomed
`feedback <https://github.com/cetmix/cetmix-tower/issues/new?body=module:%20cetmix_tower_server%0Aversion:%2014.0%0A%0A**Steps%20to%20reproduce**%0A-%20...%0A%0A**Current%20behavior**%0A%0A**Expected%20behavior**>`_.

Do not contact contributors directly about support or help with technical issues.

Credits
=======

Authors
-------

* Cetmix

Maintainers
-----------

This module is part of the `cetmix/cetmix-tower <https://github.com/cetmix/cetmix-tower/tree/14.0/cetmix_tower_server>`_ project on GitHub.

You are welcome to contribute.
