import yaml

from odoo.tests import TransactionCase


class TestTowerFileTemplate(TransactionCase):
    def setUp(self, *args, **kwargs):
        super().setUp(*args, **kwargs)

        self.FileTemplate = self.env["cx.tower.file.template"]

        # Expected YAML content of the test file template
        self.file_template_test_yaml = """cetmix_tower_model: file_template
cetmix_tower_yaml_version: 1
code: |-
  FROM odoo:{{ odoo_version }}
  # Install git-aggregator and tools for requirements generation
  RUN pip3 install --upgrade pip && pip install manifestoo setuptools-odoo git-aggregator
  # Let's go!
  USER odoo
file_name: Dockerfile
file_type: text
keep_when_deleted: true
name: Dockerfile Test
note: |-
  Used to build Odoo addons image.
  Depends on Odoo core image.
reference: dockerfile_unit_test
server_dir: /opt
source: tower
"""  # noqa

        # YAML content translated into Python dict
        self.file_template_test_yaml_dict = yaml.safe_load(self.file_template_test_yaml)

    def test_yaml_from_file_template(self):
        """Test if YAML is generated properly from a file"""

        # -- 0 --
        # Create test file
        # Test file
        file_template_test = self.FileTemplate.create(
            {
                "name": "Dockerfile Test",
                "reference": "dockerfile_unit_test",
                "file_name": "Dockerfile",
                "server_dir": "/opt",
                "source": "tower",
                "keep_when_deleted": True,
                "file_type": "text",
                "code": """FROM odoo:{{ odoo_version }}
# Install git-aggregator and tools for requirements generation
RUN pip3 install --upgrade pip && pip install manifestoo setuptools-odoo git-aggregator
# Let's go!
USER odoo""",
                "note": """Used to build Odoo addons image.
Depends on Odoo core image.""",
            }
        )

        # -- 1 --
        # Check it YAML generated by the file matches
        # YAML from the template file

        self.assertEqual(
            file_template_test.yaml_code,
            self.file_template_test_yaml,
            "YAML generated from file doesn't match template file one",
        )

        # -- 2 --
        # Check if YAML key values match Cetmix Tower ones

        self.assertEqual(
            file_template_test.source,
            self.file_template_test_yaml_dict["source"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.file_name,
            self.file_template_test_yaml_dict["file_name"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            self.FileTemplate.CETMIX_TOWER_YAML_VERSION,
            self.file_template_test_yaml_dict["cetmix_tower_yaml_version"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.code,
            self.file_template_test_yaml_dict["code"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.name,
            self.file_template_test_yaml_dict["name"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.note,
            self.file_template_test_yaml_dict["note"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.server_dir,
            self.file_template_test_yaml_dict["server_dir"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.reference,
            self.file_template_test_yaml_dict["reference"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.file_type,
            self.file_template_test_yaml_dict["file_type"],
            "YAML value doesn't match Cetmix Tower one",
        )
        self.assertEqual(
            file_template_test.keep_when_deleted,
            self.file_template_test_yaml_dict["keep_when_deleted"],
            "YAML value doesn't match Cetmix Tower one",
        )

    def test_file_template_from_yaml(self):
        """Test if YAML is generated properly from a file"""

        def test_yaml(file_template):
            """Checks if yaml values are inserted correctly

            Args:
                file_template (cx.tower.file.template): File template
            """
            self.assertEqual(
                file_template.source,
                self.file_template_test_yaml_dict["source"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.file_name,
                self.file_template_test_yaml_dict["file_name"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                self.FileTemplate.CETMIX_TOWER_YAML_VERSION,
                self.file_template_test_yaml_dict["cetmix_tower_yaml_version"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.code,
                self.file_template_test_yaml_dict["code"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.name,
                self.file_template_test_yaml_dict["name"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.note,
                self.file_template_test_yaml_dict["note"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.server_dir,
                self.file_template_test_yaml_dict["server_dir"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.reference,
                self.file_template_test_yaml_dict["reference"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.file_type,
                self.file_template_test_yaml_dict["file_type"],
                "YAML value doesn't match Cetmix Tower one",
            )
            self.assertEqual(
                file_template.keep_when_deleted,
                self.file_template_test_yaml_dict["keep_when_deleted"],
                "YAML value doesn't match Cetmix Tower one",
            )

        # Create test file template
        file_template_test = self.FileTemplate.create({"name": "New file template"})

        # -- 1 --
        # Insert YAML into the file and
        #   check if YAML key values match Cetmix Tower ones
        file_template_test.yaml_code = self.file_template_test_yaml
        test_yaml(file_template_test)

        # -- 2 --
        #  Insert some non supported keys and ensure nothing bad happens
        yaml_with_non_supported_keys = """cetmix_tower_model: file_template
cetmix_tower_yaml_version: 1
code: |-
  FROM odoo:{{ odoo_version }}
  # Install git-aggregator and tools for requirements generation
  RUN pip3 install --upgrade pip && pip install manifestoo setuptools-odoo git-aggregator
  # Let's go!
  USER odoo
doge: SoMuch style!
file_name: Dockerfile
file_type: text
keep_when_deleted: true
name: Dockerfile Test
note: |-
  Used to build Odoo addons image.
  Depends on Odoo core image.
reference: dockerfile_unit_test
server_dir: /opt
source: tower
"""  # noqa
        file_template_test.yaml_code = yaml_with_non_supported_keys
        test_yaml(file_template_test)
